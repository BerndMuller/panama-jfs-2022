// Generated by jextract

package unistd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$13 {

    static final FunctionDescriptor setlogin$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle setlogin$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "setlogin",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$13.setlogin$FUNC, false
    );
    static final MemoryLayout optarg$LAYOUT = C_POINTER;
    static final VarHandle optarg$VH = MemoryHandles.asAddressVarHandle(constants$13.optarg$LAYOUT.varHandle(long.class));
    static final MemorySegment optarg$SEGMENT = RuntimeHelper.lookupGlobalVariable(unistd_h.LIBRARIES, "optarg", constants$13.optarg$LAYOUT);
    static final MemoryLayout optind$LAYOUT = C_INT;
    static final VarHandle optind$VH = constants$13.optind$LAYOUT.varHandle(int.class);
    static final MemorySegment optind$SEGMENT = RuntimeHelper.lookupGlobalVariable(unistd_h.LIBRARIES, "optind", constants$13.optind$LAYOUT);
    static final MemoryLayout opterr$LAYOUT = C_INT;
    static final VarHandle opterr$VH = constants$13.opterr$LAYOUT.varHandle(int.class);
    static final MemorySegment opterr$SEGMENT = RuntimeHelper.lookupGlobalVariable(unistd_h.LIBRARIES, "opterr", constants$13.opterr$LAYOUT);
    static final MemoryLayout optopt$LAYOUT = C_INT;
    static final VarHandle optopt$VH = constants$13.optopt$LAYOUT.varHandle(int.class);
    static final MemorySegment optopt$SEGMENT = RuntimeHelper.lookupGlobalVariable(unistd_h.LIBRARIES, "optopt", constants$13.optopt$LAYOUT);
    static final FunctionDescriptor getopt$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle getopt$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "getopt",
        "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$13.getopt$FUNC, false
    );
}


