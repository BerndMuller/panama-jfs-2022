// Generated by jextract

package unistd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class unistd_h  {

    static {
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ unistd_h() {}
    public static int _UNISTD_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)34L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int _XOPEN_VERSION() {
        return (int)700L;
    }
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    public static int _XOPEN_XPG2() {
        return (int)1L;
    }
    public static int _XOPEN_XPG3() {
        return (int)1L;
    }
    public static int _XOPEN_XPG4() {
        return (int)1L;
    }
    public static int _XOPEN_UNIX() {
        return (int)1L;
    }
    public static int _XOPEN_ENH_I18N() {
        return (int)1L;
    }
    public static int _XOPEN_LEGACY() {
        return (int)1L;
    }
    public static int _BITS_POSIX_OPT_H() {
        return (int)1L;
    }
    public static int _POSIX_JOB_CONTROL() {
        return (int)1L;
    }
    public static int _POSIX_SAVED_IDS() {
        return (int)1L;
    }
    public static int _POSIX_CHOWN_RESTRICTED() {
        return (int)0L;
    }
    public static int _POSIX_NO_TRUNC() {
        return (int)1L;
    }
    public static int _XOPEN_REALTIME() {
        return (int)1L;
    }
    public static int _XOPEN_REALTIME_THREADS() {
        return (int)1L;
    }
    public static int _XOPEN_SHM() {
        return (int)1L;
    }
    public static int _POSIX_REENTRANT_FUNCTIONS() {
        return (int)1L;
    }
    public static int _POSIX_ASYNC_IO() {
        return (int)1L;
    }
    public static int _LFS_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    public static int _LFS64_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    public static int _LFS_LARGEFILE() {
        return (int)1L;
    }
    public static int _LFS64_LARGEFILE() {
        return (int)1L;
    }
    public static int _LFS64_STDIO() {
        return (int)1L;
    }
    public static int _POSIX_CPUTIME() {
        return (int)0L;
    }
    public static int _POSIX_THREAD_CPUTIME() {
        return (int)0L;
    }
    public static int _POSIX_REGEXP() {
        return (int)1L;
    }
    public static int _POSIX_SHELL() {
        return (int)1L;
    }
    public static int _POSIX_MONOTONIC_CLOCK() {
        return (int)0L;
    }
    public static int _POSIX_V7_LP64_OFF64() {
        return (int)1L;
    }
    public static int _POSIX_V6_LP64_OFF64() {
        return (int)1L;
    }
    public static int _XBS5_LP64_OFF64() {
        return (int)1L;
    }
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int R_OK() {
        return (int)4L;
    }
    public static int W_OK() {
        return (int)2L;
    }
    public static int X_OK() {
        return (int)1L;
    }
    public static int F_OK() {
        return (int)0L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int _GETOPT_POSIX_H() {
        return (int)1L;
    }
    public static int _GETOPT_CORE_H() {
        return (int)1L;
    }
    public static int F_ULOCK() {
        return (int)0L;
    }
    public static int F_LOCK() {
        return (int)1L;
    }
    public static int F_TLOCK() {
        return (int)2L;
    }
    public static int F_TEST() {
        return (int)3L;
    }
    public static ValueLayout __int16_t = C_SHORT;
    public static ValueLayout __int32_t = C_INT;
    public static ValueLayout __int64_t = C_LONG;
    public static ValueLayout __int_least16_t = C_SHORT;
    public static ValueLayout __int_least32_t = C_INT;
    public static ValueLayout __int_least64_t = C_LONG;
    public static ValueLayout __quad_t = C_LONG;
    public static ValueLayout __intmax_t = C_LONG;
    public static ValueLayout __off_t = C_LONG;
    public static ValueLayout __off64_t = C_LONG;
    public static ValueLayout __pid_t = C_INT;
    public static ValueLayout __clock_t = C_LONG;
    public static ValueLayout __time_t = C_LONG;
    public static ValueLayout __suseconds_t = C_LONG;
    public static ValueLayout __suseconds64_t = C_LONG;
    public static ValueLayout __daddr_t = C_INT;
    public static ValueLayout __key_t = C_INT;
    public static ValueLayout __clockid_t = C_INT;
    public static ValueLayout __blksize_t = C_LONG;
    public static ValueLayout __blkcnt_t = C_LONG;
    public static ValueLayout __blkcnt64_t = C_LONG;
    public static ValueLayout __fsword_t = C_LONG;
    public static ValueLayout __ssize_t = C_LONG;
    public static ValueLayout __syscall_slong_t = C_LONG;
    public static ValueLayout __loff_t = C_LONG;
    public static ValueLayout __intptr_t = C_LONG;
    public static ValueLayout __sig_atomic_t = C_INT;
    public static ValueLayout ssize_t = C_LONG;
    public static ValueLayout off_t = C_LONG;
    public static ValueLayout pid_t = C_INT;
    public static ValueLayout intptr_t = C_LONG;
    public static MethodHandle access$MH() {
        return RuntimeHelper.requireNonNull(constants$0.access$MH,"access");
    }
    public static int access ( Addressable __name,  int __type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.access$MH, "access");
        try {
            return (int)mh$.invokeExact(__name.address(), __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle faccessat$MH() {
        return RuntimeHelper.requireNonNull(constants$0.faccessat$MH,"faccessat");
    }
    public static int faccessat ( int __fd,  Addressable __file,  int __type,  int __flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.faccessat$MH, "faccessat");
        try {
            return (int)mh$.invokeExact(__fd, __file.address(), __type, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$0.lseek$MH,"lseek");
    }
    public static long lseek ( int __fd,  long __offset,  int __whence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.lseek$MH, "lseek");
        try {
            return (long)mh$.invokeExact(__fd, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$0.close$MH,"close");
    }
    public static int close ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.close$MH, "close");
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closefrom$MH() {
        return RuntimeHelper.requireNonNull(constants$0.closefrom$MH,"closefrom");
    }
    public static void closefrom ( int __lowfd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.closefrom$MH, "closefrom");
        try {
            mh$.invokeExact(__lowfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$0.read$MH,"read");
    }
    public static long read ( int __fd,  Addressable __buf,  long __nbytes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.read$MH, "read");
        try {
            return (long)mh$.invokeExact(__fd, __buf.address(), __nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$1.write$MH,"write");
    }
    public static long write ( int __fd,  Addressable __buf,  long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.write$MH, "write");
        try {
            return (long)mh$.invokeExact(__fd, __buf.address(), __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread$MH() {
        return RuntimeHelper.requireNonNull(constants$1.pread$MH,"pread");
    }
    public static long pread ( int __fd,  Addressable __buf,  long __nbytes,  long __offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.pread$MH, "pread");
        try {
            return (long)mh$.invokeExact(__fd, __buf.address(), __nbytes, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$1.pwrite$MH,"pwrite");
    }
    public static long pwrite ( int __fd,  Addressable __buf,  long __n,  long __offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.pwrite$MH, "pwrite");
        try {
            return (long)mh$.invokeExact(__fd, __buf.address(), __n, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$1.pipe$MH,"pipe");
    }
    public static int pipe ( Addressable __pipedes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.pipe$MH, "pipe");
        try {
            return (int)mh$.invokeExact(__pipedes.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alarm$MH() {
        return RuntimeHelper.requireNonNull(constants$1.alarm$MH,"alarm");
    }
    public static int alarm ( int __seconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.alarm$MH, "alarm");
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$1.sleep$MH,"sleep");
    }
    public static int sleep ( int __seconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1.sleep$MH, "sleep");
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ualarm$MH() {
        return RuntimeHelper.requireNonNull(constants$2.ualarm$MH,"ualarm");
    }
    public static int ualarm ( int __value,  int __interval) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.ualarm$MH, "ualarm");
        try {
            return (int)mh$.invokeExact(__value, __interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$2.usleep$MH,"usleep");
    }
    public static int usleep ( int __useconds) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.usleep$MH, "usleep");
        try {
            return (int)mh$.invokeExact(__useconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pause$MH() {
        return RuntimeHelper.requireNonNull(constants$2.pause$MH,"pause");
    }
    public static int pause () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.pause$MH, "pause");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chown$MH() {
        return RuntimeHelper.requireNonNull(constants$2.chown$MH,"chown");
    }
    public static int chown ( Addressable __file,  int __owner,  int __group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.chown$MH, "chown");
        try {
            return (int)mh$.invokeExact(__file.address(), __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchown$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fchown$MH,"fchown");
    }
    public static int fchown ( int __fd,  int __owner,  int __group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.fchown$MH, "fchown");
        try {
            return (int)mh$.invokeExact(__fd, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchown$MH() {
        return RuntimeHelper.requireNonNull(constants$2.lchown$MH,"lchown");
    }
    public static int lchown ( Addressable __file,  int __owner,  int __group) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.lchown$MH, "lchown");
        try {
            return (int)mh$.invokeExact(__file.address(), __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchownat$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fchownat$MH,"fchownat");
    }
    public static int fchownat ( int __fd,  Addressable __file,  int __owner,  int __group,  int __flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.fchownat$MH, "fchownat");
        try {
            return (int)mh$.invokeExact(__fd, __file.address(), __owner, __group, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$3.chdir$MH,"chdir");
    }
    public static int chdir ( Addressable __path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.chdir$MH, "chdir");
        try {
            return (int)mh$.invokeExact(__path.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchdir$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fchdir$MH,"fchdir");
    }
    public static int fchdir ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.fchdir$MH, "fchdir");
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$3.getcwd$MH,"getcwd");
    }
    public static MemoryAddress getcwd ( Addressable __buf,  long __size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.getcwd$MH, "getcwd");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__buf.address(), __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwd$MH() {
        return RuntimeHelper.requireNonNull(constants$3.getwd$MH,"getwd");
    }
    public static MemoryAddress getwd ( Addressable __buf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.getwd$MH, "getwd");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__buf.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup$MH() {
        return RuntimeHelper.requireNonNull(constants$3.dup$MH,"dup");
    }
    public static int dup ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.dup$MH, "dup");
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup2$MH() {
        return RuntimeHelper.requireNonNull(constants$4.dup2$MH,"dup2");
    }
    public static int dup2 ( int __fd,  int __fd2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.dup2$MH, "dup2");
        try {
            return (int)mh$.invokeExact(__fd, __fd2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __environ$LAYOUT() {
        return constants$4.__environ$LAYOUT;
    }
    public static VarHandle __environ$VH() {
        return constants$4.__environ$VH;
    }
    public static MemorySegment __environ$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$4.__environ$SEGMENT,"__environ");
    }
    public static MemoryAddress __environ$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$4.__environ$VH.get(RuntimeHelper.requireNonNull(constants$4.__environ$SEGMENT, "__environ"));
    }
    public static void __environ$set( MemoryAddress x) {
        constants$4.__environ$VH.set(RuntimeHelper.requireNonNull(constants$4.__environ$SEGMENT, "__environ"), x);
    }
    public static MethodHandle execve$MH() {
        return RuntimeHelper.requireNonNull(constants$4.execve$MH,"execve");
    }
    public static int execve ( Addressable __path,  Addressable __argv,  Addressable __envp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.execve$MH, "execve");
        try {
            return (int)mh$.invokeExact(__path.address(), __argv.address(), __envp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fexecve$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fexecve$MH,"fexecve");
    }
    public static int fexecve ( int __fd,  Addressable __argv,  Addressable __envp) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.fexecve$MH, "fexecve");
        try {
            return (int)mh$.invokeExact(__fd, __argv.address(), __envp.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execv$MH() {
        return RuntimeHelper.requireNonNull(constants$4.execv$MH,"execv");
    }
    public static int execv ( Addressable __path,  Addressable __argv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.execv$MH, "execv");
        try {
            return (int)mh$.invokeExact(__path.address(), __argv.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execle$MH() {
        return RuntimeHelper.requireNonNull(constants$4.execle$MH,"execle");
    }
    public static int execle ( Addressable __path,  Addressable __arg, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.execle$MH, "execle");
        try {
            return (int)mh$.invokeExact(__path.address(), __arg.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execl$MH() {
        return RuntimeHelper.requireNonNull(constants$5.execl$MH,"execl");
    }
    public static int execl ( Addressable __path,  Addressable __arg, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.execl$MH, "execl");
        try {
            return (int)mh$.invokeExact(__path.address(), __arg.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvp$MH() {
        return RuntimeHelper.requireNonNull(constants$5.execvp$MH,"execvp");
    }
    public static int execvp ( Addressable __file,  Addressable __argv) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.execvp$MH, "execvp");
        try {
            return (int)mh$.invokeExact(__file.address(), __argv.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execlp$MH() {
        return RuntimeHelper.requireNonNull(constants$5.execlp$MH,"execlp");
    }
    public static int execlp ( Addressable __file,  Addressable __arg, Object... x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.execlp$MH, "execlp");
        try {
            return (int)mh$.invokeExact(__file.address(), __arg.address(), x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nice$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nice$MH,"nice");
    }
    public static int nice ( int __inc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.nice$MH, "nice");
        try {
            return (int)mh$.invokeExact(__inc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$5._exit$MH,"_exit");
    }
    public static void _exit ( int __status) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5._exit$MH, "_exit");
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int _PC_LINK_MAX() {
        return (int)0L;
    }
    public static int _PC_MAX_CANON() {
        return (int)1L;
    }
    public static int _PC_MAX_INPUT() {
        return (int)2L;
    }
    public static int _PC_NAME_MAX() {
        return (int)3L;
    }
    public static int _PC_PATH_MAX() {
        return (int)4L;
    }
    public static int _PC_PIPE_BUF() {
        return (int)5L;
    }
    public static int _PC_CHOWN_RESTRICTED() {
        return (int)6L;
    }
    public static int _PC_NO_TRUNC() {
        return (int)7L;
    }
    public static int _PC_VDISABLE() {
        return (int)8L;
    }
    public static int _PC_SYNC_IO() {
        return (int)9L;
    }
    public static int _PC_ASYNC_IO() {
        return (int)10L;
    }
    public static int _PC_PRIO_IO() {
        return (int)11L;
    }
    public static int _PC_SOCK_MAXBUF() {
        return (int)12L;
    }
    public static int _PC_FILESIZEBITS() {
        return (int)13L;
    }
    public static int _PC_REC_INCR_XFER_SIZE() {
        return (int)14L;
    }
    public static int _PC_REC_MAX_XFER_SIZE() {
        return (int)15L;
    }
    public static int _PC_REC_MIN_XFER_SIZE() {
        return (int)16L;
    }
    public static int _PC_REC_XFER_ALIGN() {
        return (int)17L;
    }
    public static int _PC_ALLOC_SIZE_MIN() {
        return (int)18L;
    }
    public static int _PC_SYMLINK_MAX() {
        return (int)19L;
    }
    public static int _PC_2_SYMLINKS() {
        return (int)20L;
    }
    public static int _SC_ARG_MAX() {
        return (int)0L;
    }
    public static int _SC_CHILD_MAX() {
        return (int)1L;
    }
    public static int _SC_CLK_TCK() {
        return (int)2L;
    }
    public static int _SC_NGROUPS_MAX() {
        return (int)3L;
    }
    public static int _SC_OPEN_MAX() {
        return (int)4L;
    }
    public static int _SC_STREAM_MAX() {
        return (int)5L;
    }
    public static int _SC_TZNAME_MAX() {
        return (int)6L;
    }
    public static int _SC_JOB_CONTROL() {
        return (int)7L;
    }
    public static int _SC_SAVED_IDS() {
        return (int)8L;
    }
    public static int _SC_REALTIME_SIGNALS() {
        return (int)9L;
    }
    public static int _SC_PRIORITY_SCHEDULING() {
        return (int)10L;
    }
    public static int _SC_TIMERS() {
        return (int)11L;
    }
    public static int _SC_ASYNCHRONOUS_IO() {
        return (int)12L;
    }
    public static int _SC_PRIORITIZED_IO() {
        return (int)13L;
    }
    public static int _SC_SYNCHRONIZED_IO() {
        return (int)14L;
    }
    public static int _SC_FSYNC() {
        return (int)15L;
    }
    public static int _SC_MAPPED_FILES() {
        return (int)16L;
    }
    public static int _SC_MEMLOCK() {
        return (int)17L;
    }
    public static int _SC_MEMLOCK_RANGE() {
        return (int)18L;
    }
    public static int _SC_MEMORY_PROTECTION() {
        return (int)19L;
    }
    public static int _SC_MESSAGE_PASSING() {
        return (int)20L;
    }
    public static int _SC_SEMAPHORES() {
        return (int)21L;
    }
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return (int)22L;
    }
    public static int _SC_AIO_LISTIO_MAX() {
        return (int)23L;
    }
    public static int _SC_AIO_MAX() {
        return (int)24L;
    }
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return (int)25L;
    }
    public static int _SC_DELAYTIMER_MAX() {
        return (int)26L;
    }
    public static int _SC_MQ_OPEN_MAX() {
        return (int)27L;
    }
    public static int _SC_MQ_PRIO_MAX() {
        return (int)28L;
    }
    public static int _SC_VERSION() {
        return (int)29L;
    }
    public static int _SC_PAGESIZE() {
        return (int)30L;
    }
    public static int _SC_RTSIG_MAX() {
        return (int)31L;
    }
    public static int _SC_SEM_NSEMS_MAX() {
        return (int)32L;
    }
    public static int _SC_SEM_VALUE_MAX() {
        return (int)33L;
    }
    public static int _SC_SIGQUEUE_MAX() {
        return (int)34L;
    }
    public static int _SC_TIMER_MAX() {
        return (int)35L;
    }
    public static int _SC_BC_BASE_MAX() {
        return (int)36L;
    }
    public static int _SC_BC_DIM_MAX() {
        return (int)37L;
    }
    public static int _SC_BC_SCALE_MAX() {
        return (int)38L;
    }
    public static int _SC_BC_STRING_MAX() {
        return (int)39L;
    }
    public static int _SC_COLL_WEIGHTS_MAX() {
        return (int)40L;
    }
    public static int _SC_EQUIV_CLASS_MAX() {
        return (int)41L;
    }
    public static int _SC_EXPR_NEST_MAX() {
        return (int)42L;
    }
    public static int _SC_LINE_MAX() {
        return (int)43L;
    }
    public static int _SC_RE_DUP_MAX() {
        return (int)44L;
    }
    public static int _SC_CHARCLASS_NAME_MAX() {
        return (int)45L;
    }
    public static int _SC_2_VERSION() {
        return (int)46L;
    }
    public static int _SC_2_C_BIND() {
        return (int)47L;
    }
    public static int _SC_2_C_DEV() {
        return (int)48L;
    }
    public static int _SC_2_FORT_DEV() {
        return (int)49L;
    }
    public static int _SC_2_FORT_RUN() {
        return (int)50L;
    }
    public static int _SC_2_SW_DEV() {
        return (int)51L;
    }
    public static int _SC_2_LOCALEDEF() {
        return (int)52L;
    }
    public static int _SC_PII() {
        return (int)53L;
    }
    public static int _SC_PII_XTI() {
        return (int)54L;
    }
    public static int _SC_PII_SOCKET() {
        return (int)55L;
    }
    public static int _SC_PII_INTERNET() {
        return (int)56L;
    }
    public static int _SC_PII_OSI() {
        return (int)57L;
    }
    public static int _SC_POLL() {
        return (int)58L;
    }
    public static int _SC_SELECT() {
        return (int)59L;
    }
    public static int _SC_UIO_MAXIOV() {
        return (int)60L;
    }
    public static int _SC_IOV_MAX() {
        return (int)60L;
    }
    public static int _SC_PII_INTERNET_STREAM() {
        return (int)61L;
    }
    public static int _SC_PII_INTERNET_DGRAM() {
        return (int)62L;
    }
    public static int _SC_PII_OSI_COTS() {
        return (int)63L;
    }
    public static int _SC_PII_OSI_CLTS() {
        return (int)64L;
    }
    public static int _SC_PII_OSI_M() {
        return (int)65L;
    }
    public static int _SC_T_IOV_MAX() {
        return (int)66L;
    }
    public static int _SC_THREADS() {
        return (int)67L;
    }
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return (int)68L;
    }
    public static int _SC_GETGR_R_SIZE_MAX() {
        return (int)69L;
    }
    public static int _SC_GETPW_R_SIZE_MAX() {
        return (int)70L;
    }
    public static int _SC_LOGIN_NAME_MAX() {
        return (int)71L;
    }
    public static int _SC_TTY_NAME_MAX() {
        return (int)72L;
    }
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)73L;
    }
    public static int _SC_THREAD_KEYS_MAX() {
        return (int)74L;
    }
    public static int _SC_THREAD_STACK_MIN() {
        return (int)75L;
    }
    public static int _SC_THREAD_THREADS_MAX() {
        return (int)76L;
    }
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return (int)77L;
    }
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return (int)78L;
    }
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return (int)79L;
    }
    public static int _SC_THREAD_PRIO_INHERIT() {
        return (int)80L;
    }
    public static int _SC_THREAD_PRIO_PROTECT() {
        return (int)81L;
    }
    public static int _SC_THREAD_PROCESS_SHARED() {
        return (int)82L;
    }
    public static int _SC_NPROCESSORS_CONF() {
        return (int)83L;
    }
    public static int _SC_NPROCESSORS_ONLN() {
        return (int)84L;
    }
    public static int _SC_PHYS_PAGES() {
        return (int)85L;
    }
    public static int _SC_AVPHYS_PAGES() {
        return (int)86L;
    }
    public static int _SC_ATEXIT_MAX() {
        return (int)87L;
    }
    public static int _SC_PASS_MAX() {
        return (int)88L;
    }
    public static int _SC_XOPEN_VERSION() {
        return (int)89L;
    }
    public static int _SC_XOPEN_XCU_VERSION() {
        return (int)90L;
    }
    public static int _SC_XOPEN_UNIX() {
        return (int)91L;
    }
    public static int _SC_XOPEN_CRYPT() {
        return (int)92L;
    }
    public static int _SC_XOPEN_ENH_I18N() {
        return (int)93L;
    }
    public static int _SC_XOPEN_SHM() {
        return (int)94L;
    }
    public static int _SC_2_CHAR_TERM() {
        return (int)95L;
    }
    public static int _SC_2_C_VERSION() {
        return (int)96L;
    }
    public static int _SC_2_UPE() {
        return (int)97L;
    }
    public static int _SC_XOPEN_XPG2() {
        return (int)98L;
    }
    public static int _SC_XOPEN_XPG3() {
        return (int)99L;
    }
    public static int _SC_XOPEN_XPG4() {
        return (int)100L;
    }
    public static int _SC_CHAR_BIT() {
        return (int)101L;
    }
    public static int _SC_CHAR_MAX() {
        return (int)102L;
    }
    public static int _SC_CHAR_MIN() {
        return (int)103L;
    }
    public static int _SC_INT_MAX() {
        return (int)104L;
    }
    public static int _SC_INT_MIN() {
        return (int)105L;
    }
    public static int _SC_LONG_BIT() {
        return (int)106L;
    }
    public static int _SC_WORD_BIT() {
        return (int)107L;
    }
    public static int _SC_MB_LEN_MAX() {
        return (int)108L;
    }
    public static int _SC_NZERO() {
        return (int)109L;
    }
    public static int _SC_SSIZE_MAX() {
        return (int)110L;
    }
    public static int _SC_SCHAR_MAX() {
        return (int)111L;
    }
    public static int _SC_SCHAR_MIN() {
        return (int)112L;
    }
    public static int _SC_SHRT_MAX() {
        return (int)113L;
    }
    public static int _SC_SHRT_MIN() {
        return (int)114L;
    }
    public static int _SC_UCHAR_MAX() {
        return (int)115L;
    }
    public static int _SC_UINT_MAX() {
        return (int)116L;
    }
    public static int _SC_ULONG_MAX() {
        return (int)117L;
    }
    public static int _SC_USHRT_MAX() {
        return (int)118L;
    }
    public static int _SC_NL_ARGMAX() {
        return (int)119L;
    }
    public static int _SC_NL_LANGMAX() {
        return (int)120L;
    }
    public static int _SC_NL_MSGMAX() {
        return (int)121L;
    }
    public static int _SC_NL_NMAX() {
        return (int)122L;
    }
    public static int _SC_NL_SETMAX() {
        return (int)123L;
    }
    public static int _SC_NL_TEXTMAX() {
        return (int)124L;
    }
    public static int _SC_XBS5_ILP32_OFF32() {
        return (int)125L;
    }
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return (int)126L;
    }
    public static int _SC_XBS5_LP64_OFF64() {
        return (int)127L;
    }
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return (int)128L;
    }
    public static int _SC_XOPEN_LEGACY() {
        return (int)129L;
    }
    public static int _SC_XOPEN_REALTIME() {
        return (int)130L;
    }
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return (int)131L;
    }
    public static int _SC_ADVISORY_INFO() {
        return (int)132L;
    }
    public static int _SC_BARRIERS() {
        return (int)133L;
    }
    public static int _SC_BASE() {
        return (int)134L;
    }
    public static int _SC_C_LANG_SUPPORT() {
        return (int)135L;
    }
    public static int _SC_C_LANG_SUPPORT_R() {
        return (int)136L;
    }
    public static int _SC_CLOCK_SELECTION() {
        return (int)137L;
    }
    public static int _SC_CPUTIME() {
        return (int)138L;
    }
    public static int _SC_THREAD_CPUTIME() {
        return (int)139L;
    }
    public static int _SC_DEVICE_IO() {
        return (int)140L;
    }
    public static int _SC_DEVICE_SPECIFIC() {
        return (int)141L;
    }
    public static int _SC_DEVICE_SPECIFIC_R() {
        return (int)142L;
    }
    public static int _SC_FD_MGMT() {
        return (int)143L;
    }
    public static int _SC_FIFO() {
        return (int)144L;
    }
    public static int _SC_PIPE() {
        return (int)145L;
    }
    public static int _SC_FILE_ATTRIBUTES() {
        return (int)146L;
    }
    public static int _SC_FILE_LOCKING() {
        return (int)147L;
    }
    public static int _SC_FILE_SYSTEM() {
        return (int)148L;
    }
    public static int _SC_MONOTONIC_CLOCK() {
        return (int)149L;
    }
    public static int _SC_MULTI_PROCESS() {
        return (int)150L;
    }
    public static int _SC_SINGLE_PROCESS() {
        return (int)151L;
    }
    public static int _SC_NETWORKING() {
        return (int)152L;
    }
    public static int _SC_READER_WRITER_LOCKS() {
        return (int)153L;
    }
    public static int _SC_SPIN_LOCKS() {
        return (int)154L;
    }
    public static int _SC_REGEXP() {
        return (int)155L;
    }
    public static int _SC_REGEX_VERSION() {
        return (int)156L;
    }
    public static int _SC_SHELL() {
        return (int)157L;
    }
    public static int _SC_SIGNALS() {
        return (int)158L;
    }
    public static int _SC_SPAWN() {
        return (int)159L;
    }
    public static int _SC_SPORADIC_SERVER() {
        return (int)160L;
    }
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return (int)161L;
    }
    public static int _SC_SYSTEM_DATABASE() {
        return (int)162L;
    }
    public static int _SC_SYSTEM_DATABASE_R() {
        return (int)163L;
    }
    public static int _SC_TIMEOUTS() {
        return (int)164L;
    }
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return (int)165L;
    }
    public static int _SC_USER_GROUPS() {
        return (int)166L;
    }
    public static int _SC_USER_GROUPS_R() {
        return (int)167L;
    }
    public static int _SC_2_PBS() {
        return (int)168L;
    }
    public static int _SC_2_PBS_ACCOUNTING() {
        return (int)169L;
    }
    public static int _SC_2_PBS_LOCATE() {
        return (int)170L;
    }
    public static int _SC_2_PBS_MESSAGE() {
        return (int)171L;
    }
    public static int _SC_2_PBS_TRACK() {
        return (int)172L;
    }
    public static int _SC_SYMLOOP_MAX() {
        return (int)173L;
    }
    public static int _SC_STREAMS() {
        return (int)174L;
    }
    public static int _SC_2_PBS_CHECKPOINT() {
        return (int)175L;
    }
    public static int _SC_V6_ILP32_OFF32() {
        return (int)176L;
    }
    public static int _SC_V6_ILP32_OFFBIG() {
        return (int)177L;
    }
    public static int _SC_V6_LP64_OFF64() {
        return (int)178L;
    }
    public static int _SC_V6_LPBIG_OFFBIG() {
        return (int)179L;
    }
    public static int _SC_HOST_NAME_MAX() {
        return (int)180L;
    }
    public static int _SC_TRACE() {
        return (int)181L;
    }
    public static int _SC_TRACE_EVENT_FILTER() {
        return (int)182L;
    }
    public static int _SC_TRACE_INHERIT() {
        return (int)183L;
    }
    public static int _SC_TRACE_LOG() {
        return (int)184L;
    }
    public static int _SC_LEVEL1_ICACHE_SIZE() {
        return (int)185L;
    }
    public static int _SC_LEVEL1_ICACHE_ASSOC() {
        return (int)186L;
    }
    public static int _SC_LEVEL1_ICACHE_LINESIZE() {
        return (int)187L;
    }
    public static int _SC_LEVEL1_DCACHE_SIZE() {
        return (int)188L;
    }
    public static int _SC_LEVEL1_DCACHE_ASSOC() {
        return (int)189L;
    }
    public static int _SC_LEVEL1_DCACHE_LINESIZE() {
        return (int)190L;
    }
    public static int _SC_LEVEL2_CACHE_SIZE() {
        return (int)191L;
    }
    public static int _SC_LEVEL2_CACHE_ASSOC() {
        return (int)192L;
    }
    public static int _SC_LEVEL2_CACHE_LINESIZE() {
        return (int)193L;
    }
    public static int _SC_LEVEL3_CACHE_SIZE() {
        return (int)194L;
    }
    public static int _SC_LEVEL3_CACHE_ASSOC() {
        return (int)195L;
    }
    public static int _SC_LEVEL3_CACHE_LINESIZE() {
        return (int)196L;
    }
    public static int _SC_LEVEL4_CACHE_SIZE() {
        return (int)197L;
    }
    public static int _SC_LEVEL4_CACHE_ASSOC() {
        return (int)198L;
    }
    public static int _SC_LEVEL4_CACHE_LINESIZE() {
        return (int)199L;
    }
    public static int _SC_IPV6() {
        return (int)235L;
    }
    public static int _SC_RAW_SOCKETS() {
        return (int)236L;
    }
    public static int _SC_V7_ILP32_OFF32() {
        return (int)237L;
    }
    public static int _SC_V7_ILP32_OFFBIG() {
        return (int)238L;
    }
    public static int _SC_V7_LP64_OFF64() {
        return (int)239L;
    }
    public static int _SC_V7_LPBIG_OFFBIG() {
        return (int)240L;
    }
    public static int _SC_SS_REPL_MAX() {
        return (int)241L;
    }
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return (int)242L;
    }
    public static int _SC_TRACE_NAME_MAX() {
        return (int)243L;
    }
    public static int _SC_TRACE_SYS_MAX() {
        return (int)244L;
    }
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return (int)245L;
    }
    public static int _SC_XOPEN_STREAMS() {
        return (int)246L;
    }
    public static int _SC_THREAD_ROBUST_PRIO_INHERIT() {
        return (int)247L;
    }
    public static int _SC_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)248L;
    }
    public static int _SC_MINSIGSTKSZ() {
        return (int)249L;
    }
    public static int _SC_SIGSTKSZ() {
        return (int)250L;
    }
    public static int _CS_PATH() {
        return (int)0L;
    }
    public static int _CS_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    public static int _CS_GNU_LIBC_VERSION() {
        return (int)2L;
    }
    public static int _CS_GNU_LIBPTHREAD_VERSION() {
        return (int)3L;
    }
    public static int _CS_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    public static int _CS_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    public static int _CS_LFS_CFLAGS() {
        return (int)1000L;
    }
    public static int _CS_LFS_LDFLAGS() {
        return (int)1001L;
    }
    public static int _CS_LFS_LIBS() {
        return (int)1002L;
    }
    public static int _CS_LFS_LINTFLAGS() {
        return (int)1003L;
    }
    public static int _CS_LFS64_CFLAGS() {
        return (int)1004L;
    }
    public static int _CS_LFS64_LDFLAGS() {
        return (int)1005L;
    }
    public static int _CS_LFS64_LIBS() {
        return (int)1006L;
    }
    public static int _CS_LFS64_LINTFLAGS() {
        return (int)1007L;
    }
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return (int)1100L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return (int)1101L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return (int)1102L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return (int)1103L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return (int)1104L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return (int)1105L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return (int)1106L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1107L;
    }
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return (int)1108L;
    }
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return (int)1109L;
    }
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return (int)1110L;
    }
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return (int)1111L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return (int)1112L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1113L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return (int)1114L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1115L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return (int)1116L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return (int)1117L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return (int)1118L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS() {
        return (int)1119L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return (int)1120L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return (int)1121L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return (int)1122L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1123L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return (int)1124L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return (int)1125L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return (int)1126L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS() {
        return (int)1127L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return (int)1128L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1129L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return (int)1130L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1131L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_CFLAGS() {
        return (int)1132L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS() {
        return (int)1133L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LIBS() {
        return (int)1134L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS() {
        return (int)1135L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS() {
        return (int)1136L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS() {
        return (int)1137L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LIBS() {
        return (int)1138L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1139L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_CFLAGS() {
        return (int)1140L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LDFLAGS() {
        return (int)1141L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LIBS() {
        return (int)1142L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS() {
        return (int)1143L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS() {
        return (int)1144L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1145L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS() {
        return (int)1146L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1147L;
    }
    public static int _CS_V6_ENV() {
        return (int)1148L;
    }
    public static int _CS_V7_ENV() {
        return (int)1149L;
    }
    public static MethodHandle pathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.pathconf$MH,"pathconf");
    }
    public static long pathconf ( Addressable __path,  int __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5.pathconf$MH, "pathconf");
        try {
            return (long)mh$.invokeExact(__path.address(), __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fpathconf$MH,"fpathconf");
    }
    public static long fpathconf ( int __fd,  int __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.fpathconf$MH, "fpathconf");
        try {
            return (long)mh$.invokeExact(__fd, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysconf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.sysconf$MH,"sysconf");
    }
    public static long sysconf ( int __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.sysconf$MH, "sysconf");
        try {
            return (long)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle confstr$MH() {
        return RuntimeHelper.requireNonNull(constants$6.confstr$MH,"confstr");
    }
    public static long confstr ( int __name,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.confstr$MH, "confstr");
        try {
            return (long)mh$.invokeExact(__name, __buf.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$6.getpid$MH,"getpid");
    }
    public static int getpid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.getpid$MH, "getpid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getppid$MH() {
        return RuntimeHelper.requireNonNull(constants$6.getppid$MH,"getppid");
    }
    public static int getppid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.getppid$MH, "getppid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$6.getpgrp$MH,"getpgrp");
    }
    public static int getpgrp () {
        var mh$ = RuntimeHelper.requireNonNull(constants$6.getpgrp$MH, "getpgrp");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$7.__getpgid$MH,"__getpgid");
    }
    public static int __getpgid ( int __pid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.__getpgid$MH, "__getpgid");
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getpgid$MH,"getpgid");
    }
    public static int getpgid ( int __pid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.getpgid$MH, "getpgid");
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$7.setpgid$MH,"setpgid");
    }
    public static int setpgid ( int __pid,  int __pgid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.setpgid$MH, "setpgid");
        try {
            return (int)mh$.invokeExact(__pid, __pgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$7.setpgrp$MH,"setpgrp");
    }
    public static int setpgrp () {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.setpgrp$MH, "setpgrp");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsid$MH() {
        return RuntimeHelper.requireNonNull(constants$7.setsid$MH,"setsid");
    }
    public static int setsid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.setsid$MH, "setsid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsid$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getsid$MH,"getsid");
    }
    public static int getsid ( int __pid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.getsid$MH, "getsid");
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$8.getuid$MH,"getuid");
    }
    public static int getuid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.getuid$MH, "getuid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle geteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$8.geteuid$MH,"geteuid");
    }
    public static int geteuid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.geteuid$MH, "geteuid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$8.getgid$MH,"getgid");
    }
    public static int getgid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.getgid$MH, "getgid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getegid$MH() {
        return RuntimeHelper.requireNonNull(constants$8.getegid$MH,"getegid");
    }
    public static int getegid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.getegid$MH, "getegid");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$8.getgroups$MH,"getgroups");
    }
    public static int getgroups ( int __size,  Addressable __list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.getgroups$MH, "getgroups");
        try {
            return (int)mh$.invokeExact(__size, __list.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setuid$MH() {
        return RuntimeHelper.requireNonNull(constants$8.setuid$MH,"setuid");
    }
    public static int setuid ( int __uid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.setuid$MH, "setuid");
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setreuid$MH() {
        return RuntimeHelper.requireNonNull(constants$9.setreuid$MH,"setreuid");
    }
    public static int setreuid ( int __ruid,  int __euid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.setreuid$MH, "setreuid");
        try {
            return (int)mh$.invokeExact(__ruid, __euid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$9.seteuid$MH,"seteuid");
    }
    public static int seteuid ( int __uid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.seteuid$MH, "seteuid");
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgid$MH() {
        return RuntimeHelper.requireNonNull(constants$9.setgid$MH,"setgid");
    }
    public static int setgid ( int __gid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.setgid$MH, "setgid");
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setregid$MH() {
        return RuntimeHelper.requireNonNull(constants$9.setregid$MH,"setregid");
    }
    public static int setregid ( int __rgid,  int __egid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.setregid$MH, "setregid");
        try {
            return (int)mh$.invokeExact(__rgid, __egid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setegid$MH() {
        return RuntimeHelper.requireNonNull(constants$9.setegid$MH,"setegid");
    }
    public static int setegid ( int __gid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.setegid$MH, "setegid");
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fork$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fork$MH,"fork");
    }
    public static int fork () {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.fork$MH, "fork");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfork$MH() {
        return RuntimeHelper.requireNonNull(constants$10.vfork$MH,"vfork");
    }
    public static int vfork () {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.vfork$MH, "vfork");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ttyname$MH,"ttyname");
    }
    public static MemoryAddress ttyname ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.ttyname$MH, "ttyname");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ttyname_r$MH,"ttyname_r");
    }
    public static int ttyname_r ( int __fd,  Addressable __buf,  long __buflen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.ttyname_r$MH, "ttyname_r");
        try {
            return (int)mh$.invokeExact(__fd, __buf.address(), __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isatty$MH() {
        return RuntimeHelper.requireNonNull(constants$10.isatty$MH,"isatty");
    }
    public static int isatty ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.isatty$MH, "isatty");
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyslot$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ttyslot$MH,"ttyslot");
    }
    public static int ttyslot () {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.ttyslot$MH, "ttyslot");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$10.link$MH,"link");
    }
    public static int link ( Addressable __from,  Addressable __to) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.link$MH, "link");
        try {
            return (int)mh$.invokeExact(__from.address(), __to.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$11.linkat$MH,"linkat");
    }
    public static int linkat ( int __fromfd,  Addressable __from,  int __tofd,  Addressable __to,  int __flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.linkat$MH, "linkat");
        try {
            return (int)mh$.invokeExact(__fromfd, __from.address(), __tofd, __to.address(), __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$11.symlink$MH,"symlink");
    }
    public static int symlink ( Addressable __from,  Addressable __to) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.symlink$MH, "symlink");
        try {
            return (int)mh$.invokeExact(__from.address(), __to.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$11.readlink$MH,"readlink");
    }
    public static long readlink ( Addressable __path,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.readlink$MH, "readlink");
        try {
            return (long)mh$.invokeExact(__path.address(), __buf.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$11.symlinkat$MH,"symlinkat");
    }
    public static int symlinkat ( Addressable __from,  int __tofd,  Addressable __to) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.symlinkat$MH, "symlinkat");
        try {
            return (int)mh$.invokeExact(__from.address(), __tofd, __to.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$11.readlinkat$MH,"readlinkat");
    }
    public static long readlinkat ( int __fd,  Addressable __path,  Addressable __buf,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.readlinkat$MH, "readlinkat");
        try {
            return (long)mh$.invokeExact(__fd, __path.address(), __buf.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$11.unlink$MH,"unlink");
    }
    public static int unlink ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.unlink$MH, "unlink");
        try {
            return (int)mh$.invokeExact(__name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$12.unlinkat$MH,"unlinkat");
    }
    public static int unlinkat ( int __fd,  Addressable __name,  int __flag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.unlinkat$MH, "unlinkat");
        try {
            return (int)mh$.invokeExact(__fd, __name.address(), __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$12.rmdir$MH,"rmdir");
    }
    public static int rmdir ( Addressable __path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.rmdir$MH, "rmdir");
        try {
            return (int)mh$.invokeExact(__path.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcgetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.tcgetpgrp$MH,"tcgetpgrp");
    }
    public static int tcgetpgrp ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.tcgetpgrp$MH, "tcgetpgrp");
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcsetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.tcsetpgrp$MH,"tcsetpgrp");
    }
    public static int tcsetpgrp ( int __fd,  int __pgrp_id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.tcsetpgrp$MH, "tcsetpgrp");
        try {
            return (int)mh$.invokeExact(__fd, __pgrp_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getlogin$MH,"getlogin");
    }
    public static MemoryAddress getlogin () {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.getlogin$MH, "getlogin");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin_r$MH() {
        return RuntimeHelper.requireNonNull(constants$12.getlogin_r$MH,"getlogin_r");
    }
    public static int getlogin_r ( Addressable __name,  long __name_len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.getlogin_r$MH, "getlogin_r");
        try {
            return (int)mh$.invokeExact(__name.address(), __name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$13.setlogin$MH,"setlogin");
    }
    public static int setlogin ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.setlogin$MH, "setlogin");
        try {
            return (int)mh$.invokeExact(__name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optarg$LAYOUT() {
        return constants$13.optarg$LAYOUT;
    }
    public static VarHandle optarg$VH() {
        return constants$13.optarg$VH;
    }
    public static MemorySegment optarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$13.optarg$SEGMENT,"optarg");
    }
    public static MemoryAddress optarg$get() {
        return (jdk.incubator.foreign.MemoryAddress) constants$13.optarg$VH.get(RuntimeHelper.requireNonNull(constants$13.optarg$SEGMENT, "optarg"));
    }
    public static void optarg$set( MemoryAddress x) {
        constants$13.optarg$VH.set(RuntimeHelper.requireNonNull(constants$13.optarg$SEGMENT, "optarg"), x);
    }
    public static MemoryLayout optind$LAYOUT() {
        return constants$13.optind$LAYOUT;
    }
    public static VarHandle optind$VH() {
        return constants$13.optind$VH;
    }
    public static MemorySegment optind$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$13.optind$SEGMENT,"optind");
    }
    public static int optind$get() {
        return (int) constants$13.optind$VH.get(RuntimeHelper.requireNonNull(constants$13.optind$SEGMENT, "optind"));
    }
    public static void optind$set( int x) {
        constants$13.optind$VH.set(RuntimeHelper.requireNonNull(constants$13.optind$SEGMENT, "optind"), x);
    }
    public static MemoryLayout opterr$LAYOUT() {
        return constants$13.opterr$LAYOUT;
    }
    public static VarHandle opterr$VH() {
        return constants$13.opterr$VH;
    }
    public static MemorySegment opterr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$13.opterr$SEGMENT,"opterr");
    }
    public static int opterr$get() {
        return (int) constants$13.opterr$VH.get(RuntimeHelper.requireNonNull(constants$13.opterr$SEGMENT, "opterr"));
    }
    public static void opterr$set( int x) {
        constants$13.opterr$VH.set(RuntimeHelper.requireNonNull(constants$13.opterr$SEGMENT, "opterr"), x);
    }
    public static MemoryLayout optopt$LAYOUT() {
        return constants$13.optopt$LAYOUT;
    }
    public static VarHandle optopt$VH() {
        return constants$13.optopt$VH;
    }
    public static MemorySegment optopt$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$13.optopt$SEGMENT,"optopt");
    }
    public static int optopt$get() {
        return (int) constants$13.optopt$VH.get(RuntimeHelper.requireNonNull(constants$13.optopt$SEGMENT, "optopt"));
    }
    public static void optopt$set( int x) {
        constants$13.optopt$VH.set(RuntimeHelper.requireNonNull(constants$13.optopt$SEGMENT, "optopt"), x);
    }
    public static MethodHandle getopt$MH() {
        return RuntimeHelper.requireNonNull(constants$13.getopt$MH,"getopt");
    }
    public static int getopt ( int ___argc,  Addressable ___argv,  Addressable __shortopts) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.getopt$MH, "getopt");
        try {
            return (int)mh$.invokeExact(___argc, ___argv.address(), __shortopts.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$14.gethostname$MH,"gethostname");
    }
    public static int gethostname ( Addressable __name,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.gethostname$MH, "gethostname");
        try {
            return (int)mh$.invokeExact(__name.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$14.sethostname$MH,"sethostname");
    }
    public static int sethostname ( Addressable __name,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.sethostname$MH, "sethostname");
        try {
            return (int)mh$.invokeExact(__name.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$14.sethostid$MH,"sethostid");
    }
    public static int sethostid ( long __id) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.sethostid$MH, "sethostid");
        try {
            return (int)mh$.invokeExact(__id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$14.getdomainname$MH,"getdomainname");
    }
    public static int getdomainname ( Addressable __name,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.getdomainname$MH, "getdomainname");
        try {
            return (int)mh$.invokeExact(__name.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$14.setdomainname$MH,"setdomainname");
    }
    public static int setdomainname ( Addressable __name,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.setdomainname$MH, "setdomainname");
        try {
            return (int)mh$.invokeExact(__name.address(), __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vhangup$MH() {
        return RuntimeHelper.requireNonNull(constants$14.vhangup$MH,"vhangup");
    }
    public static int vhangup () {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.vhangup$MH, "vhangup");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle revoke$MH() {
        return RuntimeHelper.requireNonNull(constants$15.revoke$MH,"revoke");
    }
    public static int revoke ( Addressable __file) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.revoke$MH, "revoke");
        try {
            return (int)mh$.invokeExact(__file.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle profil$MH() {
        return RuntimeHelper.requireNonNull(constants$15.profil$MH,"profil");
    }
    public static int profil ( Addressable __sample_buffer,  long __size,  long __offset,  int __scale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.profil$MH, "profil");
        try {
            return (int)mh$.invokeExact(__sample_buffer.address(), __size, __offset, __scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acct$MH() {
        return RuntimeHelper.requireNonNull(constants$15.acct$MH,"acct");
    }
    public static int acct ( Addressable __name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.acct$MH, "acct");
        try {
            return (int)mh$.invokeExact(__name.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$15.getusershell$MH,"getusershell");
    }
    public static MemoryAddress getusershell () {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.getusershell$MH, "getusershell");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$15.endusershell$MH,"endusershell");
    }
    public static void endusershell () {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.endusershell$MH, "endusershell");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$15.setusershell$MH,"setusershell");
    }
    public static void setusershell () {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.setusershell$MH, "setusershell");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle daemon$MH() {
        return RuntimeHelper.requireNonNull(constants$16.daemon$MH,"daemon");
    }
    public static int daemon ( int __nochdir,  int __noclose) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.daemon$MH, "daemon");
        try {
            return (int)mh$.invokeExact(__nochdir, __noclose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chroot$MH() {
        return RuntimeHelper.requireNonNull(constants$16.chroot$MH,"chroot");
    }
    public static int chroot ( Addressable __path) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.chroot$MH, "chroot");
        try {
            return (int)mh$.invokeExact(__path.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpass$MH() {
        return RuntimeHelper.requireNonNull(constants$16.getpass$MH,"getpass");
    }
    public static MemoryAddress getpass ( Addressable __prompt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.getpass$MH, "getpass");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__prompt.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$16.fsync$MH,"fsync");
    }
    public static int fsync ( int __fd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.fsync$MH, "fsync");
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$16.gethostid$MH,"gethostid");
    }
    public static long gethostid () {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.gethostid$MH, "gethostid");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sync$MH,"sync");
    }
    public static void sync () {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.sync$MH, "sync");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpagesize$MH() {
        return RuntimeHelper.requireNonNull(constants$17.getpagesize$MH,"getpagesize");
    }
    public static int getpagesize () {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.getpagesize$MH, "getpagesize");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdtablesize$MH() {
        return RuntimeHelper.requireNonNull(constants$17.getdtablesize$MH,"getdtablesize");
    }
    public static int getdtablesize () {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.getdtablesize$MH, "getdtablesize");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$17.truncate$MH,"truncate");
    }
    public static int truncate ( Addressable __file,  long __length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.truncate$MH, "truncate");
        try {
            return (int)mh$.invokeExact(__file.address(), __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ftruncate$MH,"ftruncate");
    }
    public static int ftruncate ( int __fd,  long __length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.ftruncate$MH, "ftruncate");
        try {
            return (int)mh$.invokeExact(__fd, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle brk$MH() {
        return RuntimeHelper.requireNonNull(constants$17.brk$MH,"brk");
    }
    public static int brk ( Addressable __addr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.brk$MH, "brk");
        try {
            return (int)mh$.invokeExact(__addr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$17.sbrk$MH,"sbrk");
    }
    public static MemoryAddress sbrk ( long __delta) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.sbrk$MH, "sbrk");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syscall$MH() {
        return RuntimeHelper.requireNonNull(constants$18.syscall$MH,"syscall");
    }
    public static long syscall ( long __sysno, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.syscall$MH, "syscall");
        try {
            return (long)mh$.invokeExact(__sysno, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.lockf$MH,"lockf");
    }
    public static int lockf ( int __fd,  int __cmd,  long __len) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.lockf$MH, "lockf");
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdatasync$MH() {
        return RuntimeHelper.requireNonNull(constants$18.fdatasync$MH,"fdatasync");
    }
    public static int fdatasync ( int __fildes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.fdatasync$MH, "fdatasync");
        try {
            return (int)mh$.invokeExact(__fildes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle crypt$MH() {
        return RuntimeHelper.requireNonNull(constants$18.crypt$MH,"crypt");
    }
    public static MemoryAddress crypt ( Addressable __key,  Addressable __salt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.crypt$MH, "crypt");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(__key.address(), __salt.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getentropy$MH() {
        return RuntimeHelper.requireNonNull(constants$18.getentropy$MH,"getentropy");
    }
    public static int getentropy ( Addressable __buffer,  long __length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.getentropy$MH, "getentropy");
        try {
            return (int)mh$.invokeExact(__buffer.address(), __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static long _POSIX_VERSION() {
        return 200809L;
    }
    public static long __POSIX2_THIS_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_C_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_C_BIND() {
        return 200809L;
    }
    public static long _POSIX2_C_DEV() {
        return 200809L;
    }
    public static long _POSIX2_SW_DEV() {
        return 200809L;
    }
    public static long _POSIX2_LOCALEDEF() {
        return 200809L;
    }
    public static long _POSIX_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    public static long _POSIX_SYNCHRONIZED_IO() {
        return 200809L;
    }
    public static long _POSIX_FSYNC() {
        return 200809L;
    }
    public static long _POSIX_MAPPED_FILES() {
        return 200809L;
    }
    public static long _POSIX_MEMLOCK() {
        return 200809L;
    }
    public static long _POSIX_MEMLOCK_RANGE() {
        return 200809L;
    }
    public static long _POSIX_MEMORY_PROTECTION() {
        return 200809L;
    }
    public static int _POSIX_VDISABLE() {
        return (int)0L;
    }
    public static long _POSIX_THREADS() {
        return 200809L;
    }
    public static long _POSIX_THREAD_SAFE_FUNCTIONS() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ATTR_STACKSIZE() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ATTR_STACKADDR() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIO_INHERIT() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIO_PROTECT() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ROBUST_PRIO_INHERIT() {
        return 200809L;
    }
    public static int _POSIX_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)-1L;
    }
    public static long _POSIX_SEMAPHORES() {
        return 200809L;
    }
    public static long _POSIX_REALTIME_SIGNALS() {
        return 200809L;
    }
    public static long _POSIX_ASYNCHRONOUS_IO() {
        return 200809L;
    }
    public static long _POSIX_PRIORITIZED_IO() {
        return 200809L;
    }
    public static long _POSIX_SHARED_MEMORY_OBJECTS() {
        return 200809L;
    }
    public static long _POSIX_READER_WRITER_LOCKS() {
        return 200809L;
    }
    public static long _POSIX_TIMEOUTS() {
        return 200809L;
    }
    public static long _POSIX_SPIN_LOCKS() {
        return 200809L;
    }
    public static long _POSIX_SPAWN() {
        return 200809L;
    }
    public static long _POSIX_TIMERS() {
        return 200809L;
    }
    public static long _POSIX_BARRIERS() {
        return 200809L;
    }
    public static long _POSIX_MESSAGE_PASSING() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PROCESS_SHARED() {
        return 200809L;
    }
    public static long _POSIX_CLOCK_SELECTION() {
        return 200809L;
    }
    public static long _POSIX_ADVISORY_INFO() {
        return 200809L;
    }
    public static long _POSIX_IPV6() {
        return 200809L;
    }
    public static long _POSIX_RAW_SOCKETS() {
        return 200809L;
    }
    public static long _POSIX2_CHAR_TERM() {
        return 200809L;
    }
    public static int _POSIX_SPORADIC_SERVER() {
        return (int)-1L;
    }
    public static int _POSIX_THREAD_SPORADIC_SERVER() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_EVENT_FILTER() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_INHERIT() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_LOG() {
        return (int)-1L;
    }
    public static int _POSIX_TYPED_MEMORY_OBJECTS() {
        return (int)-1L;
    }
    public static int _POSIX_V7_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static int _POSIX_V6_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static int _XBS5_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static MemorySegment __ILP32_OFF32_CFLAGS() {
        return constants$18.__ILP32_OFF32_CFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFF32_LDFLAGS() {
        return constants$19.__ILP32_OFF32_LDFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFFBIG_CFLAGS() {
        return constants$19.__ILP32_OFFBIG_CFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFFBIG_LDFLAGS() {
        return constants$19.__ILP32_OFFBIG_LDFLAGS$SEGMENT;
    }
    public static MemorySegment __LP64_OFF64_CFLAGS() {
        return constants$19.__LP64_OFF64_CFLAGS$SEGMENT;
    }
    public static MemorySegment __LP64_OFF64_LDFLAGS() {
        return constants$19.__LP64_OFF64_LDFLAGS$SEGMENT;
    }
    public static MemoryAddress NULL() {
        return constants$19.NULL$ADDR;
    }
    public static int L_SET() {
        return (int)0L;
    }
    public static int L_INCR() {
        return (int)1L;
    }
    public static int L_XTND() {
        return (int)2L;
    }
    public static int _SC_PAGE_SIZE() {
        return (int)30L;
    }
    public static int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    public static int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    public static int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
}


