// Generated by jextract

package unistd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$6 {

    static final FunctionDescriptor fpathconf$FUNC = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_INT
    );
    static final MethodHandle fpathconf$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "fpathconf",
        "(II)J",
        constants$6.fpathconf$FUNC, false
    );
    static final FunctionDescriptor sysconf$FUNC = FunctionDescriptor.of(C_LONG,
        C_INT
    );
    static final MethodHandle sysconf$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "sysconf",
        "(I)J",
        constants$6.sysconf$FUNC, false
    );
    static final FunctionDescriptor confstr$FUNC = FunctionDescriptor.of(C_LONG,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle confstr$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "confstr",
        "(ILjdk/incubator/foreign/MemoryAddress;J)J",
        constants$6.confstr$FUNC, false
    );
    static final FunctionDescriptor getpid$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle getpid$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "getpid",
        "()I",
        constants$6.getpid$FUNC, false
    );
    static final FunctionDescriptor getppid$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle getppid$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "getppid",
        "()I",
        constants$6.getppid$FUNC, false
    );
    static final FunctionDescriptor getpgrp$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle getpgrp$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "getpgrp",
        "()I",
        constants$6.getpgrp$FUNC, false
    );
}


