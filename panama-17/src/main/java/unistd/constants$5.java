// Generated by jextract

package unistd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$5 {

    static final FunctionDescriptor execl$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle execl$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "execl",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)I",
        constants$5.execl$FUNC, true
    );
    static final FunctionDescriptor execvp$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle execvp$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "execvp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$5.execvp$FUNC, false
    );
    static final FunctionDescriptor execlp$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle execlp$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "execlp",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;[Ljava/lang/Object;)I",
        constants$5.execlp$FUNC, true
    );
    static final FunctionDescriptor nice$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle nice$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "nice",
        "(I)I",
        constants$5.nice$FUNC, false
    );
    static final FunctionDescriptor _exit$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle _exit$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "_exit",
        "(I)V",
        constants$5._exit$FUNC, false
    );
    static final FunctionDescriptor pathconf$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_INT
    );
    static final MethodHandle pathconf$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "pathconf",
        "(Ljdk/incubator/foreign/MemoryAddress;I)J",
        constants$5.pathconf$FUNC, false
    );
}


