// Generated by jextract

package unistd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$10 {

    static final FunctionDescriptor vfork$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle vfork$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "vfork",
        "()I",
        constants$10.vfork$FUNC, false
    );
    static final FunctionDescriptor ttyname$FUNC = FunctionDescriptor.of(C_POINTER,
        C_INT
    );
    static final MethodHandle ttyname$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "ttyname",
        "(I)Ljdk/incubator/foreign/MemoryAddress;",
        constants$10.ttyname$FUNC, false
    );
    static final FunctionDescriptor ttyname_r$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle ttyname_r$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "ttyname_r",
        "(ILjdk/incubator/foreign/MemoryAddress;J)I",
        constants$10.ttyname_r$FUNC, false
    );
    static final FunctionDescriptor isatty$FUNC = FunctionDescriptor.of(C_INT,
        C_INT
    );
    static final MethodHandle isatty$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "isatty",
        "(I)I",
        constants$10.isatty$FUNC, false
    );
    static final FunctionDescriptor ttyslot$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle ttyslot$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "ttyslot",
        "()I",
        constants$10.ttyslot$FUNC, false
    );
    static final FunctionDescriptor link$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle link$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "link",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$10.link$FUNC, false
    );
}


