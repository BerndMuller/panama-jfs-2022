// Generated by jextract

package unistd;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$14 {

    static final FunctionDescriptor gethostname$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle gethostname$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "gethostname",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        constants$14.gethostname$FUNC, false
    );
    static final FunctionDescriptor sethostname$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle sethostname$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "sethostname",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        constants$14.sethostname$FUNC, false
    );
    static final FunctionDescriptor sethostid$FUNC = FunctionDescriptor.of(C_INT,
        C_LONG
    );
    static final MethodHandle sethostid$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "sethostid",
        "(J)I",
        constants$14.sethostid$FUNC, false
    );
    static final FunctionDescriptor getdomainname$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle getdomainname$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "getdomainname",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        constants$14.getdomainname$FUNC, false
    );
    static final FunctionDescriptor setdomainname$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG
    );
    static final MethodHandle setdomainname$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "setdomainname",
        "(Ljdk/incubator/foreign/MemoryAddress;J)I",
        constants$14.setdomainname$FUNC, false
    );
    static final FunctionDescriptor vhangup$FUNC = FunctionDescriptor.of(C_INT);
    static final MethodHandle vhangup$MH = RuntimeHelper.downcallHandle(
        unistd_h.LIBRARIES, "vhangup",
        "()I",
        constants$14.vhangup$FUNC, false
    );
}


